import Numeric;;
import Data.Bool;;

map : (a -o b) -> [a] -o [b];;
map f xs =
    case !xs of
        [] -> [];
        (x::xs) -> f x :: map f xs;;

foldr : (a -o b -o b) -> b -o [a] -o b;;
foldr f e xs =
    case !xs of
        [] -> e;
        (x::xs) -> f x (foldr f e xs);;

fromTo : Int -> Int -> [Int];;
fromTo a b =
    if a < b then
        a :: fromTo (a + 1) b
    else
        [];;

main : Int;;
main = foldr (\x -o \y -o x + y) 5 (map (\x -o x + 1) (fromTo 1 40));;

