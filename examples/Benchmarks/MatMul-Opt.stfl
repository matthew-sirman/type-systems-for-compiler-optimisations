import Numeric;;
import Data.Bool;;

dot : [Int] -o [Int] -o Int;;
dot xs ys =
    case !xs of
        -- dot is only linear in both xs and ys
        -- if they are the same length
        [] -> (case !ys of [] -> 0);
        (x::xs) ->
            case !ys of
                (y::ys) -> (x * y) + dot xs ys;;

map : (a -> b) -> [a] -> [b];;
map f xs =
    case xs of
        [] -> [];
        (x::xs) -> f x :: map f xs;;

map' : (a -> + b) -> [a] -> + [b];;
map' f xs =
    case +xs of
        [] -> [];
        (x::xs) -> f x :: map' f xs;;

matmul : [[Int]] -> [[Int]] -> [[Int]];;
matmul a b_t = map (\row -> map (\col -> dot row col) b_t) a;;

max : Int -> + Int -> + Int;;
max a b = if +a < b then b else a;;

fold : (b -> + a -> + b) -> b -> + [a] -> + b;;
fold f e xs =
    case +xs of
        [] -> e;
        (x::xs) -> f (fold f e xs) x;;

rowMax : [Int] -> + Int;;
rowMax (x::xs) = fold max x xs;;

matrixMax : [[Int]] -> + Int;;
matrixMax (row::mat) = fold max (rowMax row) (map' rowMax mat);;

main : Int;;
main = matrixMax (matmul ((2::1::5::[])::(3::2::6::[])::(9::2::1::[])::[]) ((5::8::1::[])::(4::9::8::[])::(1::2::3::[])::[]));;

